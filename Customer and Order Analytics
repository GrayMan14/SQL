#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. 

-How many orders were in the month of January?-

SELECT count(orderID) 
    FROM BIT_DB.JanSales;

-How many January orders were an iphone?-

SELECT count(orderID) 
    FROM BIT_DB.JanSales 
        WHERE Product = 'iPhone';

-Select the customer account numbers for all the orders that were placed in February.-

SELECT cus.acctnum  
    FROM BIT_DB.customers AS cus
        INNER JOIN FebSales AS Feb
            ON cus.order_id = Feb.orderID;

-Which product that was sold in January was the cheapest price?- 

 SELECT J.Product,J.price 
         FROM BIT_DB.JanSales AS J 
             ORDER BY J.price
                 LIMIT 1;
     
-What was the total revenue for all products sold in January?-   
     
SELECT sum(quantity)*price AS revenue,product
    FROM BIT_DB.JanSales AS
        GROUP BY product;
    
-What products were sold to February at 548 Lincoln St, Seattle, WA 98101, and how many of each were sold, and what was the total revenue?-    
    
SELECT sum(Quantity),product,sum(quantity)*price AS revenue
        FROM BIT_DB.FebSales 
            WHERE location = '548 Lincoln St, Seattle, WA 98101'
                GROUP BY product;

-How many customers ordered more than 2 products at a time? What was the average amount spent for those customers?-

SELECT count(distinct cust.acctnum) AS Total,avg(quantity*price) AS AVG_Price
        FROM BIT_DB.FebSales Feb
            LEFT JOIN BIT_DB.customers cust
                    ON FEB.orderid=cust.order_id
                        WHERE Feb.Quantity>2;

-Total sales in February between dates 02/13/19 and 02/18/19?-

SELECT orderdate
    FROM BIT_DB.FebSales
        WHERE orderdate between '02/13/19 00:00' AND '02/18/19 00:00';
    
-What location ordered product on 02/18/19 01:35?-
    
SELECT location
    FROM BIT_DB.FebSales 
        WHERE orderdate = '02/18/19 01:35';

-How much product was sold on the 2nd of February 2019?-

SELECT sum(quantity)
    FROM BIT_DB.FebSales 
        WHERE orderdate like '02/18/19%';

-What type of batteries were sold in February?-

SELECT Product
    FROM BIT_DB.FebSales
        WHERE Product like '%Batteries%';

-List all products sold in Februaury, and how much do they cost when they end in $.99.-

SELECT Product, Price
    FROM BIT_DB.FebSales 
        WHERE Price like '%.99';

-List all the products sold in Los Angeles in February, and include how many of each were sold.-

SELECT Product,SUM(Quantity)
    FROM BIT_DB.FebSales
        WHERE location LIKE '%Los Angeles%'
            GROUP BY Product;
            
-Which locations in New York received at least 3 orders in January, and how many orders did they each receive?-           
            
SELECT location, COUNT(orderID) AS orders
    FROM BIT_DB.JanSales
        WHERE location LIKE '%NY%'
            GROUP BY location
                HAVING COUNT(orderID) > 2;

-How many of each type of headphone were sold in February?-           

SELECT product, SUM (quantity) AS quantity
    FROM BIT_DB.FebSales
        WHERE product LIKE '%headphone%'
            GROUP BY product;
            
-What was the average amount spent per account in February?-

SELECT AVG(quantity*price) AS Avg_Spent
    FROM BIT_DB.FebSales AS feb
        LEFT JOIN BIT_DB.customers  AS cust
            ON feb.orderid=cust.order_id;

-What was the average quantity of products purchased per account in February?-

SELECT  AVG(quantity*product) AS Avg_Quantity
    FROM BIT_DB.FebSales AS feb
            LEFT JOIN BIT_DB.customers AS cust
                ON feb.orderID=cust.order_ID;
   
-Which product brought in the most revenue in January and how much revenue did it bring in total?-   
   
SELECT Product,SUM(quantity*price) AS Revenue
    FROM BIT_DB.JanSales
        GROUP BY product
            ORDER BY SUM(quantity*price) desc
                LIMIT 1;
                
                
                ******
                
                
For the data entry below, I downloaded Spotify data from Kaggle.
I added a table to insert the below Spotify data into.
I performed multiple analytics on the data using SQL.


CREATE TABLE BIT_DB.Spotifydata (
    id integer PRIMARY KEY,
    artist_name varchar NOT NULL,
    track_name varchar NOT NULL,
    track_id varchar NOT NULL,
    popularity integer NOT NULL,
    danceability decimal(4,3) NOT NULL,
    energy decimal(4,3) NOT NULL,
    song_key integer NOT NULL,
    loudness decimal(5,3) NOT NULL,
    song_mode integer NOT NULL,
    speechiness decimal(5,4) NOT NULL,
    acousticness decimal(6,5) NOT NULL,
    instrumentalness text NOT NULL,
    liveness decimal(5,4) NOT NULL,
    valence decimal(4,3) NOT NULL,
    tempo decimal(6,3) NOT NULL,
    duration_ms integer NOT NULL,
    time_signature integer NOT NULL );

                  ******
                    
I inserted the file Spotify Data .csv into the table.
Then, I explored the included file data using the following SQL. 

-What was added to the previous table?-

SELECT * FROM BIT_DB.Spotifydata;

-What are the top 5 most popular artists and their songs?-

SELECT artist_name,track_name,popularity
    FROM BIT_DB.Spotifydata
        WHERE popularity >  80 
            ORDER BY popularity DESC
                LIMIT 5;
                
-What are the least favorite artist and their song titles?-

SELECT artist_name,track_name,popularity
    FROM BIT_DB.Spotifydata 
            ORDER BY popularity 
                LIMIT 5;
                
-Who plays the longest song?-                
                
SELECT artist_name,track_name,duration_ms AS duration
    FROM BIT_DB.Spotifydata
        ORDER BY duration DESC
            LIMIT 1;
            
-Who plays the shortest song?-            
            
SELECT artist_name,track_name,duration_ms AS duration
    FROM BIT_DB.Spotifydata
        ORDER BY duration 
            LIMIT 1;
            
-What is the average dancability,energy and length of playtime?-            
            
SELECT AVG(danceability),AVG(energy),AVG(duration_ms),AVG(tempo)
    FROM BIT_DB.Spotifydata;
    
-What is the average popularity of an artist?-    
    
SELECT AVG(popularity)
    FROM BIT_DB.Spotifydata;
    
-Who are the top star artists with an average popularity above 90%?- 

WITH popularity_average_CTE AS (
    SELECT s.artist_name,AVG(s.popularity) AS average_popularity
        FROM SpotifyData s 
            GROUP BY s.artist_name) 
    SELECT  artist_name, average_popularity, 'Top Star' AS tag
        FROM popularity_average_CTE
            WHERE average_popularity>=90;
                        
                *******
                        
For the data entry below, I downloaded CityBikeLanes data from Break Into Tech.
I added a table to insert the below CityBikeLanes data into.
In addition I performed multiple analytics on the added data using SQL.
                        
                        
CREATE TABLE BIT_DB.CityBikeLanes (
    id integer primary key,
    year_installed year not null,
    year_updated year not null,
    street varchar not null,
    width_feet integer not null,
    safetyrating integer not null,
    protected varchar not null);

INSERT INTO BIT_DB.CityBikeLanes values(1,2012, 2020, "Chestnut",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(2,2016, 2020,"Walnut",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(3,2011, 2020, "Market", 3.5, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(4,2008, 2020,"Locust",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(5,2002, 2020,"South",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(6,2012, 2021, "18th",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(7,2016, 2021,"2nd",4,3.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(8,2011, 2021, "Lombard", 3.5, 2.2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(9,2008, 2021,"Pine",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(10,2002, 2021,"Tasker",4.5,4.8,"no");

INSERT INTO BIT_DB.CityBikeLanes values(11,2012, 2020, "Earp",4,4.1,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(12,2016, 2020,"Titan",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(13,2011, 2020, "Manning", 3.4, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(14,2008, 2020,"Fieldcrest",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(15,2002, 2020,"York",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(16,2012, 2021, "Race",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(17,2016, 2021,"Museum",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(18,2011, 2021, "Altin", 3.5, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(19,2008, 2021,"Fred",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(20,2002, 2021,"Morris",4.5,4.7,"no");

INSERT INTO BIT_DB.CityBikeLanes values(21,2012, 2020, "Jameson",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(22,2016, 2020,"MLK",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(23,2011, 2020, "Parker", 3.6, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(24,2008, 2020,"Thomas",4,4.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(25,2002, 2020,"Running",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(26,2012, 2021, "Waverly",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(27,2016, 2021,"Addison",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(28,2011, 2021, "Beaver", 3.5, 2.1, "no");
INSERT INTO BIT_DB.CityBikeLanes values(29,2008, 2021,"Kensington",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(30,2002, 2021,"Mouse",4.5,4.5,"no");

INSERT INTO BIT_DB.CityBikeLanes values(31,2012, 2020, "Chestnut",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(32,2016, 2020,"Walnut",4,3.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(33,2011, 2020, "Market", 3.8, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(34,2008, 2020,"Locust",4,4.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(35,2002, 2020,"South",4.5,4.7,"no");
INSERT INTO BIT_DB.CityBikeLanes values(36,2012, 2021, "18th",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(37,2016, 2021,"2nd",4,3.2,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(38,2011, 2021, "Lombard", 3.5, 2.5, "no");
INSERT INTO BIT_DB.CityBikeLanes values(39,2008, 2021,"Pine",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(40,2002, 2021,"Tasker",4.5,4.3,"no");

INSERT INTO BIT_DB.CityBikeLanes values(41,2012, 2020, "Earp",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(42,2016, 2020,"Titan",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(43,2011, 2020, "Manning", 3.4, 2.7, "no");
INSERT INTO BIT_DB.CityBikeLanes values(44,2008, 2020,"Fieldcrest",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(45,2002, 2020,"York",4.5,4.4,"no");
INSERT INTO BIT_DB.CityBikeLanes values(46,2012, 2021, "Race",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(47,2016, 2021,"Museum",4,3.4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(48,2011, 2021, "Altin", 3.7, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(49,2008, 2021,"Fred",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(50,2002, 2021,"Morris",4.5,4.4,"no");

INSERT INTO BIT_DB.CityBikeLanes values(51,2012, 2020, "Jameson",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(52,2016, 2020,"MLK",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(53,2011, 2020, "Parker", 3.6, 2.3, "no");
INSERT INTO BIT_DB.CityBikeLanes values(54,2008, 2020,"Thomas",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(55,2002, 2020,"Running",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(56,2012, 2021, "Waverly",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(57,2016, 2021,"Addison",4,3.6,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(58,2011, 2021, "Beaver", 3.5, 2.5, "no");
INSERT INTO BIT_DB.CityBikeLanes values(59,2008, 2021,"Kensington",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(60,2002, 2021,"Mouse",4.5,4.3,"no");

              *****
              
After I inserted the above BikeCityLanes Data into the table I explored the data using the following SQL. 

-What all was added to the BikeCityLanes table?-

SELECT * FROM CityBikeLanes LIMIT 10;

-What lane information do you have on Walnut street?-

SELECT * FROM CityBikeLanes WHERE street='Walnut';

-Where are the highest safety rating of all the bike lanes? What is the average bike safety rating? All ratings over 4 are retagged as Safe Lane.- 

WITH BikeSafety_CTE AS (
    SELECT C.street,AVG(C.safetyrating) AS saf_rat
        FROM  CityBikeLanes AS C
            GROUP BY street)
    SELECT street,saf_rat, 'Safe Lane' AS TAG
        FROM BikeSafety_CTE
            WHERE saf_rat >=4
                ORDER BY saf_rat DESC;
                
                
                

    
